-- MySQL Script generated by MySQL Workbench
-- Wed Jun 19 00:25:09 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema posgrado_db
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema posgrado_db
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `posgrado_db` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `posgrado_db` ;

-- -----------------------------------------------------
-- Table `posgrado_db`.`user`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`user` (
  `userID` INT NOT NULL AUTO_INCREMENT,
  `rut` VARCHAR(14) NOT NULL,
  `firstName` VARCHAR(45) NOT NULL,
  `secondName` VARCHAR(45) NULL,
  `surname1` VARCHAR(45) NOT NULL,
  `surname2` VARCHAR(45) NULL,
  `sex` CHAR(1) NOT NULL,
  `civilStatus` VARCHAR(14) NULL,
  `birthday` DATE NOT NULL,
  `address` VARCHAR(60) NULL,
  `email` VARCHAR(60) NOT NULL,
  `personalEmail` VARCHAR(60) NULL,
  `phone` VARCHAR(14) CHARACTER SET 'ascii' NULL,
  `entry` YEAR NULL,
  `group` INT NULL,
  `workPlace` VARCHAR(60) NULL,
  `phoneWork` VARCHAR(14) CHARACTER SET 'ascii' NULL,
  `job` VARCHAR(60) NULL,
  `articulation` TINYINT(1) NULL,
  INDEX `idx_email` (`email` ASC) VISIBLE,
  PRIMARY KEY (`userID`),
  UNIQUE INDEX `userID_UNIQUE` (`userID` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`university`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`university` (
  `universityID` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(60) NOT NULL,
  `city` VARCHAR(60) NOT NULL,
  `country` VARCHAR(60) NOT NULL,
  PRIMARY KEY (`universityID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`role`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`role` (
  `roleID` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_0900_ai_ci' NOT NULL,
  PRIMARY KEY (`roleID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`userHasRole`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`userHasRole` (
  `userID` INT NOT NULL,
  `roleID` INT NOT NULL,
  INDEX `fk_rolUser_user1_idx` (`userID` ASC) VISIBLE,
  INDEX `fk_rolUser_rol1_idx` (`roleID` ASC) VISIBLE,
  PRIMARY KEY (`userID`, `roleID`),
  CONSTRAINT `fk_userHasRole_userID`
    FOREIGN KEY (`userID`)
    REFERENCES `posgrado_db`.`user` (`userID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_userHasRole_roleID`
    FOREIGN KEY (`roleID`)
    REFERENCES `posgrado_db`.`role` (`roleID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`degree`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`degree` (
  `degreeID` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(60) NOT NULL,
  `type` VARCHAR(60) NULL,
  PRIMARY KEY (`degreeID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`area`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`area` (
  `areaID` INT NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`areaID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`title`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`title` (
  `titleID` INT NOT NULL AUTO_INCREMENT,
  `universityID` INT NOT NULL,
  `degreeID` INT NOT NULL,
  `name` VARCHAR(80) NOT NULL,
  `areaID` INT NULL,
  PRIMARY KEY (`titleID`),
  INDEX `fk_titles_type1_idx` (`degreeID` ASC) VISIBLE,
  INDEX `fk_title_university1_idx` (`universityID` ASC) VISIBLE,
  INDEX `fk_title_areaID_idx` (`areaID` ASC) VISIBLE,
  CONSTRAINT `fk_titles_degreeID`
    FOREIGN KEY (`degreeID`)
    REFERENCES `posgrado_db`.`degree` (`degreeID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_title_universityID`
    FOREIGN KEY (`universityID`)
    REFERENCES `posgrado_db`.`university` (`universityID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_title_areaID`
    FOREIGN KEY (`areaID`)
    REFERENCES `posgrado_db`.`area` (`areaID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`specialization`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`specialization` (
  `specializationID` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(80) NOT NULL,
  PRIMARY KEY (`specializationID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`campus`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`campus` (
  `campusID` INT NOT NULL AUTO_INCREMENT,
  `universityID` INT NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `ubication` VARCHAR(60) NOT NULL,
  PRIMARY KEY (`campusID`),
  INDEX `fk_campus_university1_idx` (`universityID` ASC) VISIBLE,
  CONSTRAINT `fk_campus_universityID`
    FOREIGN KEY (`universityID`)
    REFERENCES `posgrado_db`.`university` (`universityID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`building`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`building` (
  `buildingID` INT NOT NULL AUTO_INCREMENT,
  `campusID` INT NOT NULL,
  `name` VARCHAR(60) NOT NULL,
  PRIMARY KEY (`buildingID`),
  INDEX `fk_building_campus1_idx` (`campusID` ASC) VISIBLE,
  CONSTRAINT `fk_building_campusID`
    FOREIGN KEY (`campusID`)
    REFERENCES `posgrado_db`.`campus` (`campusID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`format`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`format` (
  `formatID` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(60) NOT NULL,
  PRIMARY KEY (`formatID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`room`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`room` (
  `roomID` INT NOT NULL AUTO_INCREMENT,
  `buildingID` INT NOT NULL,
  `name` VARCHAR(60) NOT NULL,
  `description` TEXT NULL,
  `floor` INT NOT NULL,
  `capacity` INT NULL,
  `width` INT NOT NULL,
  `length` INT NOT NULL,
  `height` INT NOT NULL,
  `photoURL` TEXT NULL,
  `formatID` INT NULL,
  PRIMARY KEY (`roomID`),
  INDEX `fk_building_buildingID_idx` (`buildingID` ASC) VISIBLE,
  INDEX `fk_format_formatID_idx` (`formatID` ASC) VISIBLE,
  CONSTRAINT `fk_room_buildingID`
    FOREIGN KEY (`buildingID`)
    REFERENCES `posgrado_db`.`building` (`buildingID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_room_formatID`
    FOREIGN KEY (`formatID`)
    REFERENCES `posgrado_db`.`format` (`formatID`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`studentHasTitle`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`studentHasTitle` (
  `studentHasTitleID` INT NOT NULL AUTO_INCREMENT,
  `userID` INT NOT NULL,
  `titleID` INT NOT NULL,
  `titleYear` YEAR(4) NOT NULL,
  `archiveURL` VARCHAR(2083) NOT NULL,
  `formatID` INT NOT NULL,
  PRIMARY KEY (`studentHasTitleID`),
  INDEX `fk_rolHasTitle_title1_idx` (`titleID` ASC) VISIBLE,
  INDEX `fk_rolHasTitle_format1_idx` (`formatID` ASC) VISIBLE,
  INDEX `fk_rolHasTitle_user1_idx` (`userID` ASC) VISIBLE,
  CONSTRAINT `fk_studentHasTitle_titleID`
    FOREIGN KEY (`titleID`)
    REFERENCES `posgrado_db`.`title` (`titleID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_studentHasTitle_formatID`
    FOREIGN KEY (`formatID`)
    REFERENCES `posgrado_db`.`format` (`formatID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_studentHasTitle_userID`
    FOREIGN KEY (`userID`)
    REFERENCES `posgrado_db`.`user` (`userID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`semester`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`semester` (
  `semesterID` INT NOT NULL AUTO_INCREMENT,
  `year` YEAR(4) NOT NULL,
  `semesterNumber` TINYINT(2) NOT NULL,
  `startDate` DATE NOT NULL,
  `finishDate` DATE NOT NULL,
  PRIMARY KEY (`semesterID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`evaluationStatus`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`evaluationStatus` (
  `evaluationStatusID` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(60) NOT NULL,
  `description` VARCHAR(255) NULL,
  PRIMARY KEY (`evaluationStatusID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`evaluationType`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`evaluationType` (
  `evaluationTypeID` INT NOT NULL,
  `name` VARCHAR(45) NULL,
  PRIMARY KEY (`evaluationTypeID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`studentHasSemester`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`studentHasSemester` (
  `studentHasSemesterID` INT NOT NULL AUTO_INCREMENT,
  `userID` INT NOT NULL,
  `semesterID` INT NOT NULL,
  `specializationID` INT NOT NULL DEFAULT 1,
  `evaluationStatusID` INT NULL DEFAULT NULL,
  `evaluationTypeID` INT NULL DEFAULT NULL,
  INDEX `fk_Name_semester1_idx` (`semesterID` ASC) VISIBLE,
  PRIMARY KEY (`studentHasSemesterID`),
  UNIQUE INDEX `unique_user_semester` (`userID` ASC, `semesterID` ASC) VISIBLE,
  INDEX `fk_studentHasSemester_specializationID1_idx` (`specializationID` ASC) VISIBLE,
  INDEX `fk_studentHasSemester_evaluationStatusID_idx` (`evaluationStatusID` ASC) VISIBLE,
  INDEX `fk_studentHasSemester_evaluationTypeID_idx` (`evaluationTypeID` ASC) VISIBLE,
  CONSTRAINT `fk_studentHasSemester_specializationID`
    FOREIGN KEY (`specializationID`)
    REFERENCES `posgrado_db`.`specialization` (`specializationID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_studentHasSemester_semesterID`
    FOREIGN KEY (`semesterID`)
    REFERENCES `posgrado_db`.`semester` (`semesterID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_studentHasSemester_userID`
    FOREIGN KEY (`userID`)
    REFERENCES `posgrado_db`.`user` (`userID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_studentHasSemester_evaluationStatusID`
    FOREIGN KEY (`evaluationStatusID`)
    REFERENCES `posgrado_db`.`evaluationStatus` (`evaluationStatusID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_studentHasSemester_evaluationTypeID`
    FOREIGN KEY (`evaluationTypeID`)
    REFERENCES `posgrado_db`.`evaluationType` (`evaluationTypeID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`thesisGrades`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`thesisGrades` (
  `thesisGradesID` INT NOT NULL AUTO_INCREMENT,
  `finalGrade` FLOAT(2) NULL DEFAULT NULL,
  `grade1` FLOAT(2) NULL DEFAULT NULL,
  `grade2` FLOAT(2) NULL DEFAULT NULL,
  `grade3` FLOAT(2) NULL DEFAULT NULL,
  PRIMARY KEY (`thesisGradesID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`thesisRegistration`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`thesisRegistration` (
  `thesisRegistrationID` INT NOT NULL AUTO_INCREMENT,
  `studentID` INT NOT NULL,
  `directorID` INT NOT NULL,
  `codirectorID` int DEFAULT NULL,
  `title` VARCHAR(400) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  PRIMARY KEY (`thesisRegistrationID`)
) ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`template`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`template` (
  `templateID` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(60) NOT NULL,
  `description` VARCHAR(255) NULL,
  `isActive` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`templateID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`rubric`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`rubric` (
  `rubricID` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(60) NULL,
  `description` VARCHAR(255) NULL,
  `templateID` INT NULL,
  PRIMARY KEY (`rubricID`),
  INDEX `fk_rubric_templateID1_idx` (`templateID` ASC) VISIBLE,
  CONSTRAINT `fk_rubric_templateID`
    FOREIGN KEY (`templateID`)
    REFERENCES `posgrado_db`.`template` (`templateID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`evaluation`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`evaluation` (
  `evaluationID` INT NOT NULL AUTO_INCREMENT,
  `studentHasSemesterID` INT NOT NULL,
  `evaluationStatusID` INT NOT NULL DEFAULT 1,
  `projectURL` VARCHAR(2083) NULL,
  `formatID` INT NULL,
  `creationDate` TIMESTAMP NULL,
  `updateDate` TIMESTAMP NULL,
  `lateMinutes` INT NULL DEFAULT 0,
  `rubricID` INT NULL DEFAULT NULL,
  `thesisGradesID` INT NULL DEFAULT NULL,
  PRIMARY KEY (`evaluationID`),
  INDEX `fk_evaluate_format1_idx` (`formatID` ASC) VISIBLE,
  INDEX `fk_specializationHasSemesterID_idx` (`studentHasSemesterID` ASC) VISIBLE,
  INDEX `fk_evaluate_evaluationStatusID1_idx` (`evaluationStatusID` ASC) VISIBLE,
  INDEX `fk_evaluation_thesisID_idx` (`thesisGradesID` ASC) VISIBLE,
  INDEX `fk_evaluation_rubricID_idx` (`rubricID` ASC) VISIBLE,
  CONSTRAINT `fk_evaluation_formatID`
    FOREIGN KEY (`formatID`)
    REFERENCES `posgrado_db`.`format` (`formatID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_evaluation_studentHasSemesterID`
    FOREIGN KEY (`studentHasSemesterID`)
    REFERENCES `posgrado_db`.`studentHasSemester` (`studentHasSemesterID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_evaluation_evaluationStatusID`
    FOREIGN KEY (`evaluationStatusID`)
    REFERENCES `posgrado_db`.`evaluationStatus` (`evaluationStatusID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_evaluation_thesisID`
    FOREIGN KEY (`thesisGradesID`)
    REFERENCES `posgrado_db`.`thesisGrades` (`thesisGradesID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_evaluation_rubricID`
    FOREIGN KEY (`rubricID`)
    REFERENCES `posgrado_db`.`rubric` (`rubricID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`document`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`document` (
  `documentID` INT NOT NULL AUTO_INCREMENT,
  `userID` INT NOT NULL,
  `category` VARCHAR(60) NOT NULL,
  `archiveURL` VARCHAR(2083) NOT NULL,
  `formatID` INT NOT NULL,
  PRIMARY KEY (`documentID`),
  INDEX `fk_document_format1_idx` (`formatID` ASC) VISIBLE,
  INDEX `fk_document_user1_idx` (`userID` ASC) VISIBLE,
  CONSTRAINT `fk_document_formatID`
    FOREIGN KEY (`formatID`)
    REFERENCES `posgrado_db`.`format` (`formatID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_document_userID`
    FOREIGN KEY (`userID`)
    REFERENCES `posgrado_db`.`user` (`userID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`object`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`object` (
  `objectID` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(60) NOT NULL,
  `description` TEXT NULL,
  `photoURL` VARCHAR(2083) NULL,
  `formatID` INT NULL,
  PRIMARY KEY (`objectID`),
  INDEX `fk_format_formatID_idx` (`formatID` ASC) VISIBLE,
  CONSTRAINT `fk_object_formatID`
    FOREIGN KEY (`formatID`)
    REFERENCES `posgrado_db`.`format` (`formatID`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`roomHasObject`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`roomHasObject` (
  `roomHasObjectID` INT NOT NULL AUTO_INCREMENT,
  `roomID` INT NOT NULL,
  `objectID` INT NOT NULL,
  `quantity` INT NOT NULL,
  PRIMARY KEY (`roomHasObjectID`),
  INDEX `fk_inventoryHasRoom_room1_idx` (`roomID` ASC) VISIBLE,
  INDEX `fk_inventoryHasRoom_object1_idx` (`objectID` ASC) VISIBLE,
  CONSTRAINT `fk_roomHasObject_roomID`
    FOREIGN KEY (`roomID`)
    REFERENCES `posgrado_db`.`room` (`roomID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_roomHasObject_objectID`
    FOREIGN KEY (`objectID`)
    REFERENCES `posgrado_db`.`object` (`objectID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`semesterStatus`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`semesterStatus` (
  `semesterStatusID` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(60) NOT NULL,
  `description` VARCHAR(255) NULL,
  PRIMARY KEY (`semesterStatusID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`studentHasSpecialization`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`studentHasSpecialization` (
  `studentHasSpecializationID` INT NOT NULL AUTO_INCREMENT,
  `userID` INT NOT NULL,
  `specializationID` INT NOT NULL,
  `entrySemesterID` INT NOT NULL,
  `completionSemesterID` INT NULL,
  `semesterStatusID` INT NOT NULL DEFAULT 1,
  PRIMARY KEY (`studentHasSpecializationID`),
  INDEX `fk_studentHasSpecialization_specialization1_idx` (`specializationID` ASC) INVISIBLE,
  INDEX `fk_studentHasSpecialization_user1_idx` (`userID` ASC) VISIBLE,
  INDEX `fk_completionSemester_idx` (`entrySemesterID` ASC) VISIBLE,
  INDEX `fk_completionSemester_idx1` (`completionSemesterID` ASC) INVISIBLE,
  INDEX `fk_studentHasSpecialization_statusID1_idx` (`semesterStatusID` ASC) INVISIBLE,
  UNIQUE INDEX `unique_user_specialization` (`userID` ASC, `specializationID` ASC) INVISIBLE,
  CONSTRAINT `fk_studentHasSpecialization_specializationID`
    FOREIGN KEY (`specializationID`)
    REFERENCES `posgrado_db`.`specialization` (`specializationID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_studentHasSpecialization_userID`
    FOREIGN KEY (`userID`)
    REFERENCES `posgrado_db`.`user` (`userID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_studentHasSpecialization_entrySemesterID`
    FOREIGN KEY (`entrySemesterID`)
    REFERENCES `posgrado_db`.`semester` (`semesterID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_studentHasSpecialization_semesterStatusID`
    FOREIGN KEY (`semesterStatusID`)
    REFERENCES `posgrado_db`.`semesterStatus` (`semesterStatusID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_studentHasSpecialization_completionSemesterID`
    FOREIGN KEY (`completionSemesterID`)
    REFERENCES `posgrado_db`.`semester` (`semesterID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`question`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`question` (
  `questionID` INT NOT NULL AUTO_INCREMENT,
  `userID` INT NULL,
  `question` VARCHAR(255) NOT NULL,
  `isActive` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`questionID`),
  INDEX `fk_question_user1_idx` (`userID` ASC) VISIBLE,
  CONSTRAINT `fk_question_userID`
    FOREIGN KEY (`userID`)
    REFERENCES `posgrado_db`.`user` (`userID`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`section`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`section` (
  `sectionID` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `isActive` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`sectionID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`rubricHasSection`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`rubricHasSection` (
  `rubricHasSectionID` INT NOT NULL AUTO_INCREMENT,
  `rubricID` INT NOT NULL,
  `sectionID` INT NOT NULL,
  `positionNumber` TINYINT(2) NOT NULL,
  PRIMARY KEY (`rubricHasSectionID`),
  INDEX `fk_rubricHasSection_rubricID1_idx` (`rubricID` ASC) VISIBLE,
  INDEX `fk_rubricHasSection_sectionID1_idx` (`sectionID` ASC) VISIBLE,
  CONSTRAINT `fk_rubricHasSection_rubricID1`
    FOREIGN KEY (`rubricID`)
    REFERENCES `posgrado_db`.`rubric` (`rubricID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_rubricHasSection_sectionID1`
    FOREIGN KEY (`sectionID`)
    REFERENCES `posgrado_db`.`section` (`sectionID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`rubricHasQuestion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`rubricHasQuestion` (
  `rubricHasQuestionID` INT NOT NULL AUTO_INCREMENT,
  `rubricHasSectionID` INT NOT NULL,
  `questionID` INT NOT NULL,
  `positionNumber` TINYINT(2) NOT NULL,
  INDEX `fk_table1_question1_idx` (`questionID` ASC) VISIBLE,
  PRIMARY KEY (`rubricHasQuestionID`),
  INDEX `fk_sectionHasQuestion_rubric1_idx` (`rubricHasSectionID` ASC) VISIBLE,
  CONSTRAINT `fk_rubricHasQuestion_questionID`
    FOREIGN KEY (`questionID`)
    REFERENCES `posgrado_db`.`question` (`questionID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_rubricHasQuestion_rubricID`
    FOREIGN KEY (`rubricHasSectionID`)
    REFERENCES `posgrado_db`.`rubricHasSection` (`rubricHasSectionID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`academicHasTitle`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`academicHasTitle` (
  `academicHasTitleID` INT NOT NULL AUTO_INCREMENT,
  `userID` INT NOT NULL,
  `titleID` INT NOT NULL,
  `titleYear` YEAR(4) NOT NULL,
  `archiveURL` VARCHAR(2083) NOT NULL,
  `formatID` INT NOT NULL,
  `studyField` VARCHAR(60) NULL,
  PRIMARY KEY (`academicHasTitleID`),
  INDEX `fk_academicHasTitle_title_idx` (`titleID` ASC) VISIBLE,
  INDEX `fk_academicHasTitle_userID_idx` (`userID` ASC) VISIBLE,
  INDEX `fk_academicHasTitle_formatID_idx` (`formatID` ASC) VISIBLE,
  CONSTRAINT `fk_academicHasTitle_titleID`
    FOREIGN KEY (`titleID`)
    REFERENCES `posgrado_db`.`title` (`titleID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_academicHasTitle_userID`
    FOREIGN KEY (`userID`)
    REFERENCES `posgrado_db`.`user` (`userID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_academicHasTitle_formatID`
    FOREIGN KEY (`formatID`)
    REFERENCES `posgrado_db`.`format` (`formatID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`templateHasSection`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`templateHasSection` (
  `templateHasSectionID` INT NOT NULL AUTO_INCREMENT,
  `templateID` INT NOT NULL,
  `sectionID` INT NOT NULL,
  `positionNumber` TINYINT(2) NOT NULL,
  PRIMARY KEY (`templateHasSectionID`),
  INDEX `fk_templateHasSection_templateID_idx` (`templateID` ASC) VISIBLE,
  INDEX `fk_templateHasSection_sectionID1_idx` (`sectionID` ASC) VISIBLE,
  CONSTRAINT `fk_templateHasSection_templateID`
    FOREIGN KEY (`templateID`)
    REFERENCES `posgrado_db`.`template` (`templateID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_templateHasSection_sectionID`
    FOREIGN KEY (`sectionID`)
    REFERENCES `posgrado_db`.`section` (`sectionID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`templateHasQuestion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`templateHasQuestion` (
  `templateHasQuestionID` INT NOT NULL AUTO_INCREMENT,
  `templateHasSectionID` INT NOT NULL,
  `questionID` INT NOT NULL,
  `positionNumber` TINYINT(2) NOT NULL,
  PRIMARY KEY (`templateHasQuestionID`),
  INDEX `fk_templateHasQuestion_questionID1_idx` (`questionID` ASC) VISIBLE,
  INDEX `fk_templateHasQuestion_templateID1_idx` (`templateHasSectionID` ASC) VISIBLE,
  CONSTRAINT `fk_templateHasQuestion_templateHasSectionID`
    FOREIGN KEY (`templateHasSectionID`)
    REFERENCES `posgrado_db`.`templateHasSection` (`templateHasSectionID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_templateHasQuestion_questionID`
    FOREIGN KEY (`questionID`)
    REFERENCES `posgrado_db`.`question` (`questionID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`teacher_question`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`teacher_question` (
  `teacher_questionID` INT NOT NULL AUTO_INCREMENT,
  `userID` INT NULL,
  `question` VARCHAR(255) NOT NULL,
  `isActive` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`teacher_questionID`),
  INDEX `fk_question_user1_idx` (`userID` ASC) VISIBLE,
  CONSTRAINT `fk_teacher_question_userID`
    FOREIGN KEY (`userID`)
    REFERENCES `posgrado_db`.`user` (`userID`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`teacher_template`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`teacher_template` (
  `teacher_templateID` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(60) NOT NULL,
  `description` VARCHAR(255) NULL,
  `isActive` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`teacher_templateID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`teacher_section`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`teacher_section` (
  `teacher_sectionID` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `isActive` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`teacher_sectionID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`teacher_templateHasSection`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`teacher_templateHasSection` (
  `teacher_templateHasSectionID` INT NOT NULL AUTO_INCREMENT,
  `teacher_templateID` INT NOT NULL,
  `teacher_sectionID` INT NOT NULL,
  `positionNumber` TINYINT(2) NOT NULL,
  PRIMARY KEY (`teacher_templateHasSectionID`),
  INDEX `fk_teacher_templateHasSection_teacher_sectionID1_idx` (`teacher_sectionID` ASC) VISIBLE,
  INDEX `fk_teacher_templateHasSection_teacher_templateID1_idx` (`teacher_templateID` ASC) VISIBLE,
  CONSTRAINT `fk_teacher_templateHasSection_teacher_sectionID`
    FOREIGN KEY (`teacher_sectionID`)
    REFERENCES `posgrado_db`.`teacher_section` (`teacher_sectionID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_teacher_templateHasSection_teacher_templateID`
    FOREIGN KEY (`teacher_templateID`)
    REFERENCES `posgrado_db`.`teacher_template` (`teacher_templateID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`teacher_templateHasQuestion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`teacher_templateHasQuestion` (
  `teacher_templateHasQuestionID` INT NOT NULL AUTO_INCREMENT,
  `teacher_templateHasSectionID` INT NOT NULL,
  `teacher_questionID` INT NOT NULL,
  `positionNumber` TINYINT(2) NOT NULL,
  PRIMARY KEY (`teacher_templateHasQuestionID`),
  INDEX `fk_templateHasQuestion_questionID10_idx` (`teacher_questionID` ASC) VISIBLE,
  INDEX `fk_templateHasQuestion_templateHasSectionID1_idx` (`teacher_templateHasSectionID` ASC) VISIBLE,
  CONSTRAINT `fk_teacher_templateHasQuestion_templateHasSectionID`
    FOREIGN KEY (`teacher_templateHasSectionID`)
    REFERENCES `posgrado_db`.`teacher_templateHasSection` (`teacher_templateHasSectionID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_teacher_templateHasQuestion_questionID`
    FOREIGN KEY (`teacher_questionID`)
    REFERENCES `posgrado_db`.`teacher_question` (`teacher_questionID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`assignedSpecialization`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`assignedSpecialization` (
  `assignedSpecializationID` INT NOT NULL AUTO_INCREMENT,
  `userID` INT NOT NULL,
  `specializationID` INT NOT NULL,
  `semesterID` INT NOT NULL,
  PRIMARY KEY (`assignedSpecializationID`),
  INDEX `fk_assignedSpecialization_userID1_idx` (`userID` ASC) VISIBLE,
  INDEX `fk_assignedSpecialization_specializationID_idx` (`specializationID` ASC) VISIBLE,
  INDEX `fk_assignedSpecialization_semesterID1_idx` (`semesterID` ASC) VISIBLE,
  CONSTRAINT `fk_assignedSpecialization_userID`
    FOREIGN KEY (`userID`)
    REFERENCES `posgrado_db`.`user` (`userID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_assignedSpecialization_specializationID`
    FOREIGN KEY (`specializationID`)
    REFERENCES `posgrado_db`.`specialization` (`specializationID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_assignedSpecialization_semesterID`
    FOREIGN KEY (`semesterID`)
    REFERENCES `posgrado_db`.`semester` (`semesterID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`teacher_rubric`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`teacher_rubric` (
  `teacher_rubricID` INT NOT NULL AUTO_INCREMENT,
  `assignedSpecializationID` INT NOT NULL,
  `teacher_templateID` INT NULL,
  PRIMARY KEY (`teacher_rubricID`),
  INDEX `fk_assignedSpecializationID1_idx` (`assignedSpecializationID` ASC) VISIBLE,
  INDEX `fk_teacher_templateID_idx` (`teacher_templateID` ASC) VISIBLE,
  CONSTRAINT `fk_teacher_rubric_assignedSpecializationID`
    FOREIGN KEY (`assignedSpecializationID`)
    REFERENCES `posgrado_db`.`assignedSpecialization` (`assignedSpecializationID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_teacher_rubric_teacher_templateID`
    FOREIGN KEY (`teacher_templateID`)
    REFERENCES `posgrado_db`.`teacher_template` (`teacher_templateID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`teacher_rubricHasSection`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`teacher_rubricHasSection` (
  `teacher_rubricHasSectionID` INT NOT NULL AUTO_INCREMENT,
  `teacher_rubricID` INT NOT NULL,
  `teacher_sectionID` INT NOT NULL,
  `positionNumber` TINYINT(2) NOT NULL,
  PRIMARY KEY (`teacher_rubricHasSectionID`),
  INDEX `fk_teacher_rubricHasSection_teacher_rubricID1_idx` (`teacher_rubricID` ASC) VISIBLE,
  INDEX `fk_teacher_rubricHasSection_teacher_sectionID1_idx` (`teacher_sectionID` ASC) VISIBLE,
  CONSTRAINT `fk_teacher_rubricHasSection_teacher_rubricID`
    FOREIGN KEY (`teacher_rubricID`)
    REFERENCES `posgrado_db`.`teacher_rubric` (`teacher_rubricID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_teacher_rubricHasSection_teacher_sectionID`
    FOREIGN KEY (`teacher_sectionID`)
    REFERENCES `posgrado_db`.`teacher_section` (`teacher_sectionID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`teacher_rubricHasQuestion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`teacher_rubricHasQuestion` (
  `teacher_rubricHasQuestionID` INT NOT NULL AUTO_INCREMENT,
  `teacher_rubricHasSectionID` INT NOT NULL,
  `teacher_questionID` INT NOT NULL,
  `positionNumber` TINYINT(2) NOT NULL,
  `excellent` SMALLINT NULL,
  `good` SMALLINT NULL,
  `medium` SMALLINT NULL,
  `bad` SMALLINT NULL,
  PRIMARY KEY (`teacher_rubricHasQuestionID`),
  INDEX `fk_teacher_rubricHasQuestion_techer_questionID1_idx` (`teacher_questionID` ASC) VISIBLE,
  INDEX `fk_teacher_rubricHasQuestion_teacher_rubricID1_idx` (`teacher_rubricHasSectionID` ASC) VISIBLE,
  CONSTRAINT `fk_teacher_rubricHasQuestion_teacher_questionID`
    FOREIGN KEY (`teacher_questionID`)
    REFERENCES `posgrado_db`.`teacher_question` (`teacher_questionID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_teacher_rubricHasQuestion_teacher_rubricID`
    FOREIGN KEY (`teacher_rubricHasSectionID`)
    REFERENCES `posgrado_db`.`teacher_rubricHasSection` (`teacher_rubricHasSectionID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`student_evaluator`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`student_evaluator` (
  `userID` INT NOT NULL,
  `teacher_rubricID` INT NOT NULL,
  INDEX `fk_student_evaluator_userID_idx` (`userID` ASC) VISIBLE,
  INDEX `fk_student_evaluator_teacher_rubricID_idx` (`teacher_rubricID` ASC) VISIBLE,
  PRIMARY KEY (`teacher_rubricID`, `userID`),
  CONSTRAINT `fk_student_evaluator_userID`
    FOREIGN KEY (`userID`)
    REFERENCES `posgrado_db`.`user` (`userID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_student_evaluator_teacher_rubricID`
    FOREIGN KEY (`teacher_rubricID`)
    REFERENCES `posgrado_db`.`teacher_rubric` (`teacher_rubricID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`academicInfo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`academicInfo` (
  `userID` INT NOT NULL,
  `bondType` ENUM('Claustro','Núcleo','Colaborador/a') NOT NULL,
  `investigationLines` VARCHAR(255) NULL,
  `bestDegreeID` INT NOT NULL,
  `workedHours` enum('Jornada Completa','Media Jornada','Profesor Hora/Part-Time') NULL,
  `hierarchy` ENUM('Sin jerarquía', 'Titular', 'Asistente', 'Asociado', 'Instructor') NOT NULL DEFAULT 'Sin jerarquía',
  PRIMARY KEY (`userID`),
  INDEX `fk_academicInfo_bestDegreeID_idx` (`bestDegreeID` ASC) VISIBLE,
  CONSTRAINT `fk_academicInfo_userID`
    FOREIGN KEY (`userID`)
    REFERENCES `posgrado_db`.`user` (`userID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_academicInfo_bestDegreeID`
    FOREIGN KEY (`bestDegreeID`)
    REFERENCES `posgrado_db`.`academicHasTitle` (`academicHasTitleID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`guidedThesis`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`guidedThesis` (
  `guidedThesisID` INT NOT NULL AUTO_INCREMENT,
  `userID` INT NOT NULL,
  `author` VARCHAR(80) NOT NULL,
  `type` ENUM('Magíster', 'Doctorado') NOT NULL,
  `role` ENUM('Guía', 'Co-Guía') NOT NULL,
  `year` YEAR NOT NULL,
  `title` VARCHAR(350) NOT NULL,
  `program` VARCHAR(150) NULL,
  `institution` VARCHAR(200) NULL,
  `sameProgram` TINYINT(1) NULL,
  `accessURL` VARCHAR(2083) NOT NULL,
  PRIMARY KEY (`guidedThesisID`),
  INDEX `fk_guidedThesis_userID_idx` (`userID` ASC) VISIBLE,
  CONSTRAINT `fk_guidedThesis_userID`
    FOREIGN KEY (`userID`)
    REFERENCES `posgrado_db`.`user` (`userID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`publication`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`publication` (
  `publicationID` INT NOT NULL AUTO_INCREMENT,
  `userID` INT NOT NULL,
  `authors` VARCHAR(300) NOT NULL,
  `leadAuthor` VARCHAR(80) NULL,
  `isIndexed` TINYINT(1) NOT NULL,
  `type` VARCHAR(45) NOT NULL,
  `year` YEAR NOT NULL,
  `title` VARCHAR(350) NOT NULL,
  `journal` VARCHAR(200) NOT NULL,
  `status` VARCHAR(45) NOT NULL,
  `ISSN` CHAR(20) NOT NULL,
  `accessURL` VARCHAR(2083) NULL,
  PRIMARY KEY (`publicationID`),
  INDEX `fk_publication_userID_idx` (`userID` ASC) VISIBLE,
  CONSTRAINT `fk_publication_userID`
    FOREIGN KEY (`userID`)
    REFERENCES `posgrado_db`.`user` (`userID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`bookChapter`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`bookChapter` (
  `bookChapterID` INT NOT NULL AUTO_INCREMENT,
  `userID` INT NOT NULL,
  `authors` VARCHAR(300) NOT NULL,
  `leadAuthor` VARCHAR(80) NULL,
  `type` VARCHAR(45) NOT NULL,
  `year` YEAR NOT NULL,
  `bookName` VARCHAR(400) NOT NULL,
  `chapterName` VARCHAR(400) NULL,
  `place` VARCHAR(80) NULL,
  `editorial` VARCHAR(200) NOT NULL,
  `status` VARCHAR(45) NOT NULL,
  `accessURL` VARCHAR(2083) NULL,
  PRIMARY KEY (`bookChapterID`),
  INDEX `fk_bookChapter_userID_idx` (`userID` ASC) VISIBLE,
  CONSTRAINT `fk_bookChapter_userID`
    FOREIGN KEY (`userID`)
    REFERENCES `posgrado_db`.`user` (`userID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`patent`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`patent` (
  `patentID` INT NOT NULL AUTO_INCREMENT,
  `userID` INT NOT NULL,
  `inventors` VARCHAR(300) NOT NULL,
  `patentName` VARCHAR(300) NOT NULL,
  `applicationDate` DATE NOT NULL,
  `publicationDate` DATE NULL,
  `registrationNumber` VARCHAR(20) NULL,
  `status` VARCHAR(45) NOT NULL,
  `accessURL` VARCHAR(2083) NULL,
  PRIMARY KEY (`patentID`),
  INDEX `fk_patent_userID_idx` (`userID` ASC) VISIBLE,
  CONSTRAINT `fk_patent_userID`
    FOREIGN KEY (`userID`)
    REFERENCES `posgrado_db`.`user` (`userID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`project`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`project` (
  `projectID` INT NOT NULL AUTO_INCREMENT,
  `userID` INT NOT NULL,
  `title` VARCHAR(350) NOT NULL,
  `type` VARCHAR(80) NOT NULL,
  `fundingSource` VARCHAR(300) NOT NULL,
  `grantYear` YEAR NOT NULL,
  `executionPeriod` VARCHAR(45) NOT NULL,
  `role` VARCHAR(45) NOT NULL,
  `accessURL` VARCHAR(2083) NULL,
  PRIMARY KEY (`projectID`),
  INDEX `fk_project_userID_idx` (`userID` ASC) VISIBLE,
  CONSTRAINT `fk_project_userID`
    FOREIGN KEY (`userID`)
    REFERENCES `posgrado_db`.`user` (`userID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`consultancy`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`consultancy` (
  `consultancyID` INT NOT NULL AUTO_INCREMENT,
  `userID` INT NOT NULL,
  `title` VARCHAR(350) NOT NULL,
  `contractingInstitution` VARCHAR(200) NOT NULL,
  `grantYear` YEAR NOT NULL,
  `executionPeriod` VARCHAR(45) NOT NULL,
  `objective` VARCHAR(1000) NULL,
  `accessURL` VARCHAR(2083) NULL,
  PRIMARY KEY (`consultancyID`),
  INDEX `fk_consultancy_userID_idx` (`userID` ASC) VISIBLE,
  CONSTRAINT `fk_consultancy_userID`
    FOREIGN KEY (`userID`)
    REFERENCES `posgrado_db`.`user` (`userID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`permission`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`permission` (
  `permissionID` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(60) NOT NULL,
  PRIMARY KEY (`permissionID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`userHasPermission`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`userHasPermission` (
  `userHasPermissionID` INT NOT NULL AUTO_INCREMENT,
  `userID` INT NOT NULL,
  `permissionID` INT NOT NULL,
  `dueDate` TIMESTAMP NOT NULL,
  PRIMARY KEY (`userHasPermissionID`),
  INDEX `fk_userHasPermission_userID_idx` (`userID` ASC) VISIBLE,
  INDEX `fk_userHasPermission_permissionID_idx` (`permissionID` ASC) VISIBLE,
  CONSTRAINT `fk_userHasPermission_userID`
    FOREIGN KEY (`userID`)
    REFERENCES `posgrado_db`.`user` (`userID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_userHasPermission_permissionID`
    FOREIGN KEY (`permissionID`)
    REFERENCES `posgrado_db`.`permission` (`permissionID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`elective`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`elective` (
  `electiveID` INT NOT NULL AUTO_INCREMENT,
  `specializationID` INT NOT NULL,
  `number` TINYINT(1) NOT NULL,
  `name` VARCHAR(80) NOT NULL,
  PRIMARY KEY (`electiveID`),
  INDEX `fk_elective_specializationID_idx` (`specializationID` ASC) VISIBLE,
  CONSTRAINT `fk_elective_specializationID`
    FOREIGN KEY (`specializationID`)
    REFERENCES `posgrado_db`.`specialization` (`specializationID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`evaluatorCategory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`evaluatorCategory` (
  `evaluatorCategoryID` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NULL,
  PRIMARY KEY (`evaluatorCategoryID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`thesisEvaluator`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`thesisEvaluator` (
  `thesisEvaluatorID` INT NOT NULL AUTO_INCREMENT,
  `evaluationID` INT NOT NULL,
  `userID` INT NOT NULL,
  `evaluatorCategoryID` INT NOT NULL,
  `grade1` FLOAT(2) NULL DEFAULT NULL,
  `grade2` FLOAT(2) NULL DEFAULT NULL,
  `comment` VARCHAR(1000) NULL,
  PRIMARY KEY (`thesisEvaluatorID`),
  INDEX `fk_thesisEvaluator_userID_idx` (`userID` ASC) VISIBLE,
  INDEX `fk_thesisEvaluator_evaluatorCategoryID_idx` (`evaluatorCategoryID` ASC) VISIBLE,
  INDEX `fk_thesisEvaluator_evaluationID_idx` (`evaluationID` ASC) VISIBLE,
  CONSTRAINT `fk_thesisEvaluator_evaluationID`
    FOREIGN KEY (`evaluationID`)
    REFERENCES `posgrado_db`.`evaluation` (`evaluationID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_thesisEvaluator_userID`
    FOREIGN KEY (`userID`)
    REFERENCES `posgrado_db`.`user` (`userID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_thesisEvaluator_evaluatorCategoryID`
    FOREIGN KEY (`evaluatorCategoryID`)
    REFERENCES `posgrado_db`.`evaluatorCategory` (`evaluatorCategoryID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`preprojectEvaluator`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`preprojectEvaluator` (
  `preprojectEvaluatorID` INT NOT NULL AUTO_INCREMENT,
  `evaluationID` INT NOT NULL,
  `userID` INT NOT NULL,
  `evaluatorCategoryID` INT NOT NULL,
  `evaluationStatusID` INT NOT NULL DEFAULT 2,
  `comment` VARCHAR(1000) NULL,
  `comment1` VARCHAR(1000) NULL,
  `comment2` VARCHAR(1000) NULL,
  `comment3` VARCHAR(1000) NULL,
  `comment4` VARCHAR(1000) NULL,
  `comment5` VARCHAR(1000) NULL,
  `comment6` VARCHAR(1000) NULL,
  `comment7` VARCHAR(1000) NULL,
  PRIMARY KEY (`preprojectEvaluatorID`),
  INDEX `fk_preprojectEvaluator_preprojectID_idx` (`evaluationID` ASC) VISIBLE,
  INDEX `fk_preprojectEvaluator_userID_idx` (`userID` ASC) VISIBLE,
  INDEX `fk_preprojectEvaluator_evaluatorCategoryID_idx` (`evaluatorCategoryID` ASC) VISIBLE,
  INDEX `fk_preprojectEvaluator_evaluationStatusID_idx` (`evaluationStatusID` ASC) VISIBLE,
  CONSTRAINT `fk_preprojectEvaluator_preprojectID`
    FOREIGN KEY (`evaluationID`)
    REFERENCES `posgrado_db`.`evaluation` (`evaluationID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_preprojectEvaluator_userID`
    FOREIGN KEY (`userID`)
    REFERENCES `posgrado_db`.`user` (`userID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_preprojectEvaluator_evaluatorCategoryID`
    FOREIGN KEY (`evaluatorCategoryID`)
    REFERENCES `posgrado_db`.`evaluatorCategory` (`evaluatorCategoryID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_preprojectEvaluator_evaluationStatusID`
    FOREIGN KEY (`evaluationStatusID`)
    REFERENCES `posgrado_db`.`evaluationStatus` (`evaluationStatusID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`evaluatorAnswer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`evaluatorAnswer` (
  `evaluatorAnswerID` INT NOT NULL AUTO_INCREMENT,
  `preprojectEvaluatorID` INT NOT NULL,
  `rubricHasQuestionID` INT NOT NULL,
  `answer` ENUM('Excelente', 'Bien', 'Aceptable', 'Insuficiente') NOT NULL,
  PRIMARY KEY (`evaluatorAnswerID`),
  INDEX `fk_evaluatorAnswer_preprojectEvaluatorID_idx` (`preprojectEvaluatorID` ASC) VISIBLE,
  INDEX `fk_evaluatorAnswer_rubricHasQuestionID_idx` (`rubricHasQuestionID` ASC) VISIBLE,
  CONSTRAINT `fk_evaluatorAnswer_preprojectEvaluatorID`
    FOREIGN KEY (`preprojectEvaluatorID`)
    REFERENCES `posgrado_db`.`preprojectEvaluator` (`preprojectEvaluatorID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_evaluatorAnswer_rubricHasQuestionID`
    FOREIGN KEY (`rubricHasQuestionID`)
    REFERENCES `posgrado_db`.`rubricHasQuestion` (`rubricHasQuestionID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`stageAnswer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`stageAnswer` (
  `stageAnswerID` INT NOT NULL AUTO_INCREMENT,
  `thesisEvaluatorID` INT NOT NULL,
  `rubricHasQuestionID` INT NOT NULL,
  `answer` ENUM('Muy Deficiente', 'Deficiente', 'Insuficiente', 'Aceptable', 'Buena', 'Muy Buena', 'Excelente') NOT NULL,
  PRIMARY KEY (`stageAnswerID`),
  INDEX `fk_stageAnswer_questionID_idx` (`rubricHasQuestionID` ASC) VISIBLE,
  INDEX `fk_stageAnswer_thesisEvaluatorID_idx` (`thesisEvaluatorID` ASC) VISIBLE,
  CONSTRAINT `fk_stageAnswer_rubricHasQuestionID`
    FOREIGN KEY (`rubricHasQuestionID`)
    REFERENCES `posgrado_db`.`rubricHasQuestion` (`rubricHasQuestionID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_stageAnswer_thesisEvaluatorID`
    FOREIGN KEY (`thesisEvaluatorID`)
    REFERENCES `posgrado_db`.`thesisEvaluator` (`thesisEvaluatorID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`studentHasElective`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`studentHasElective` (
  `studentHasElectiveID` INT NOT NULL AUTO_INCREMENT,
  `userID` INT NOT NULL,
  `electiveID` INT NOT NULL,
  `semesterID` INT NOT NULL,
  PRIMARY KEY (`studentHasElectiveID`),
  INDEX `fk_studentHasElective_userID_idx` (`userID` ASC) VISIBLE,
  INDEX `fk_studentHasElective_electiveID_idx` (`electiveID` ASC) VISIBLE,
  INDEX `fk_studentHasElective_semesterID_idx` (`semesterID` ASC) VISIBLE,
  UNIQUE INDEX `semesterID_UNIQUE` (`userID` ASC, `semesterID` ASC) VISIBLE,
  CONSTRAINT `fk_studentHasElective_userID`
    FOREIGN KEY (`userID`)
    REFERENCES `posgrado_db`.`user` (`userID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_studentHasElective_electiveID`
    FOREIGN KEY (`electiveID`)
    REFERENCES `posgrado_db`.`elective` (`electiveID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_studentHasElective_semesterID`
    FOREIGN KEY (`semesterID`)
    REFERENCES `posgrado_db`.`semester` (`semesterID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posgrado_db`.`otpToken`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`otpToken` (
  `otpID` INT NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(60) NOT NULL,
  `token` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`otpID`),
  UNIQUE INDEX `otpID_UNIQUE` (`otpID` ASC) VISIBLE,
  INDEX `fk_user_email_idx` (`email` ASC) VISIBLE,
  CONSTRAINT `fk_otpToken_email`
    FOREIGN KEY (`email`)
    REFERENCES `posgrado_db`.`user` (`email`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

USE `posgrado_db` ;

-- -----------------------------------------------------
-- Placeholder table for view `posgrado_db`.`academic`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`academic` (`userID` INT, `rut` INT, `firstName` INT, `secondName` INT, `surname1` INT, `surname2` INT, `sex` INT, `civilStatus` INT, `birthday` INT, `address` INT, `email` INT, `phone` INT, `entry` INT, `group` INT, `workPlace` INT, `phoneWork` INT, `job` INT, `articulation` INT, `titlesID` INT, `titles` INT, `academicHasTitlesID` INT);

-- -----------------------------------------------------
-- Placeholder table for view `posgrado_db`.`administrative`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`administrative` (`userID` INT, `rut` INT, `firstName` INT, `secondName` INT, `surname1` INT, `surname2` INT, `sex` INT, `civilStatus` INT, `birthday` INT, `address` INT, `email` INT, `phone` INT, `entry` INT, `group` INT, `workPlace` INT, `phoneWork` INT, `job` INT, `articulation` INT, `role` INT);

-- -----------------------------------------------------
-- Placeholder table for view `posgrado_db`.`student`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`student` (`userID` INT, `rut` INT, `firstName` INT, `secondName` INT, `surname1` INT, `surname2` INT, `sex` INT, `civilStatus` INT, `birthday` INT, `address` INT, `email` INT, `phone` INT, `entry` INT, `group` INT, `workPlace` INT, `phoneWork` INT, `job` INT, `articulation` INT, `titlesID` INT, `titles` INT, `studentHasTitlesID` INT, `studentHasSpecializationID` INT, `specializationID` INT, `specializationName` INT, `studentHasElectiveID1` INT, `electiveID1` INT, `electiveName1` INT, `studentHasElectiveID2` INT, `electiveID2` INT, `electiveName2` INT);

-- -----------------------------------------------------
-- Placeholder table for view `posgrado_db`.`thesisEvaluation`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`thesisEvaluation` (`evaluationID` INT, `studentHasSemesterID` INT, `projectURL` INT, `formatID` INT, `creationDate` INT, `updateDate` INT, `lateMinutes` INT, `semesterID` INT, `year` INT, `semesterNumber` INT, `startDate` INT, `finishDate` INT, `specializationID` INT, `specializationName` INT, `finalGrade` INT, `stage1_grade` INT, `stage2_grade` INT, `stage3_grade` INT, `director_grade1` INT, `director_grade2` INT, `codirector_grade1` INT, `codirector_grade2` INT, `programDirector_grade1` INT, `programDirector_grade2` INT, `academicA_grade1` INT, `academicA_grade2` INT, `academicB_grade1` INT, `academicB_grade2` INT, `rubric_rubricID` INT, `rubric_name` INT, `rubric_description` INT, `rubric_templateID` INT, `director_thesisEvaluatorID` INT, `director_userID` INT, `director_fullName` INT, `director_rut` INT, `director_email` INT, `codirector_thesisEvaluatorID` INT, `codirector_userID` INT, `codirector_fullName` INT, `codirector_rut` INT, `codirector_email` INT, `programDirector_thesisEvaluatorID` INT, `programDirector_userID` INT, `programDirector_fullName` INT, `programDirector_rut` INT, `programDirector_email` INT, `academicA_thesisEvaluatorID` INT, `academicA_userID` INT, `academicA_fullName` INT, `academicA_rut` INT, `academicA_email` INT, `academicB_thesisEvaluatorID` INT, `academicB_userID` INT, `academicB_fullName` INT, `academicB_rut` INT, `academicB_email` INT);

-- -----------------------------------------------------
-- Placeholder table for view `posgrado_db`.`preprojectEvaluation`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`preprojectEvaluation` (`evaluationID` INT, `studentHasSemesterID` INT, `projectURL` INT, `formatID` INT, `creationDate` INT, `updateDate` INT, `lateMinutes` INT, `preproject_statusID` INT, `preproject_status` INT, `preproject_statusDescription` INT, `academicA_statusID` INT, `academicB_statusID` INT, `rubric_rubricID` INT, `rubric_name` INT, `rubric_description` INT, `rubric_templateID` INT, `semesterID` INT, `year` INT, `semesterNumber` INT, `startDate` INT, `finishDate` INT, `specializationID` INT, `specializationName` INT, `academicA_status` INT, `academicA_statusDescription` INT, `academicB_status` INT, `academicB_statusDescription` INT, `academicA_preprojectEvaluatorID` INT, `academicA_userID` INT, `academicA_fullName` INT, `academicA_rut` INT, `academicA_email` INT, `academicB_preprojectEvaluatorID` INT, `academicB_userID` INT, `academicB_fullName` INT, `academicB_rut` INT, `academicB_email` INT, `guideAcademic_userID` INT, `guideAcademic_fullName` INT, `guideAcademic_rut` INT, `guideAcademic_email` INT);

-- -----------------------------------------------------
-- Placeholder table for view `posgrado_db`.`userHasRoles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`userHasRoles` (`userID` INT, `rut` INT, `firstName` INT, `secondName` INT, `surname1` INT, `surname2` INT, `sex` INT, `civilStatus` INT, `birthday` INT, `address` INT, `email` INT, `phone` INT, `entry` INT, `group` INT, `workPlace` INT, `phoneWork` INT, `job` INT, `articulation` INT, `rolesID` INT, `roles` INT);

-- -----------------------------------------------------
-- Placeholder table for view `posgrado_db`.`titleHasUniversity`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`titleHasUniversity` (`titleID` INT, `universityID` INT, `degreeID` INT, `name` INT, `areaID` INT, `universityName` INT, `country` INT, `city` INT, `degree` INT, `type` INT);

-- -----------------------------------------------------
-- Placeholder table for view `posgrado_db`.`usersWithRoles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`usersWithRoles` (`userID` INT, `role` INT, `roleID` INT);

-- -----------------------------------------------------
-- Placeholder table for view `posgrado_db`.`user_short`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `posgrado_db`.`user_short` (`userID` INT, `rut` INT, `fullName` INT, `email` INT);

-- -----------------------------------------------------
-- View `posgrado_db`.`academic`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `posgrado_db`.`academic`;
USE `posgrado_db`;
CREATE OR REPLACE VIEW academic AS
SELECT
	a.*,
    tt.titlesID,
	tt.titles,
    tt.academicHasTitlesID
FROM
  	(SELECT 
		u.*
	FROM 
		usersWithRoles uwr
		JOIN user u
		ON u.userID = uwr.userID
		WHERE 
			role = "Académico" 
	) a
	LEFT JOIN (
		SELECT
			aht.userID,
            GROUP_CONCAT(t.titleID ORDER BY t.titleID SEPARATOR ';') AS titlesID,
			GROUP_CONCAT(t.name ORDER BY t.titleID SEPARATOR ';') AS titles,
            GROUP_CONCAT(aht.academicHasTitleID ORDER BY t.titleID SEPARATOR ';') AS academicHasTitlesID
		FROM
			academicHasTitle aht
			join title t 
			on t.titleID = aht.titleID
		GROUP BY
			aht.userID
	) tt 
	ON a.userID = tt.userID;

-- -----------------------------------------------------
-- View `posgrado_db`.`administrative`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `posgrado_db`.`administrative`;
USE `posgrado_db`;
CREATE OR REPLACE VIEW
	administrative AS
SELECT
	u.*,
	uwr.role
FROM
	user u
	JOIN usersWithRoles uwr
    ON u.userID = uwr.userID
WHERE
	uwr.role <> 'Estudiante';

-- -----------------------------------------------------
-- View `posgrado_db`.`student`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `posgrado_db`.`student`;
USE `posgrado_db`;
CREATE OR REPLACE VIEW student AS
SELECT
	s.*,
	tt.titlesID,
	tt.titles,
	tt.studentHasTitlesID,
    shs.studentHasSpecializationID,
    sp.specializationID AS specializationID,
    sp.name AS specializationName,
    se1.studentHasElectiveID AS studentHasElectiveID1,
    se1.electiveID AS electiveID1,
    se1.name AS electiveName1,
    se2.studentHasElectiveID AS studentHasElectiveID2,
    se2.electiveID AS electiveID2,
    se2.name AS electiveName2
FROM (
    SELECT 
        u.*
    FROM 
    usersWithRoles uwr
    JOIN user u
    ON u.userID = uwr.userID
    WHERE 
        role = "Estudiante"
) s
LEFT JOIN (
    SELECT
        sht.userID,
        GROUP_CONCAT(t.titleID ORDER BY t.titleID SEPARATOR ';') AS titlesID,
        GROUP_CONCAT(t.name ORDER BY t.titleID SEPARATOR ';') AS titles,
        GROUP_CONCAT(sht.studentHasTitleID ORDER BY t.titleID SEPARATOR ';') AS studentHasTitlesID
    FROM
        studentHasTitle sht
        join title t 
        on t.titleID = sht.titleID
    GROUP BY
        sht.userID
) tt 
ON s.userID = tt.userID
LEFT JOIN (
    SELECT shs.userID, MAX(shs.studentHasSpecializationID) AS studentHasSpecializationID
    FROM studentHasSpecialization shs
    GROUP BY shs.userID
) ss
ON s.userID = ss.userID
LEFT JOIN studentHasSpecialization shs
ON shs.studentHasSpecializationID = ss.studentHasSpecializationID
LEFT JOIN specialization sp
ON sp.specializationID = shs.specializationID
LEFT JOIN (
    SELECT she.userID, MAX(she.studentHasElectiveID) AS studentHasElectiveID, e.electiveID, e.name, e.specializationID
    FROM studentHasElective she
    JOIN elective e
    ON e.electiveID = she.electiveID
    WHERE e.number = 1
    GROUP BY she.userID, e.electiveID, e.name, e.specializationID
) se1
ON s.userID = se1.userID AND shs.specializationID = se1.specializationID
LEFT JOIN (
    SELECT she.userID, MAX(she.studentHasElectiveID) AS studentHasElectiveID, e.electiveID, e.name, e.specializationID
    FROM studentHasElective she
    JOIN elective e
    ON e.electiveID = she.electiveID
    WHERE e.number = 2
    GROUP BY she.userID, e.electiveID, e.name, e.specializationID
) se2
ON s.userID = se2.userID AND shs.specializationID = se2.specializationID;

-- -----------------------------------------------------
-- View `posgrado_db`.`thesisEvaluation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `posgrado_db`.`thesisEvaluation`;
USE `posgrado_db`;
CREATE OR REPLACE VIEW thesisEvaluation AS
SELECT
	t.evaluationID,
    t.studentHasSemesterID,
    t.projectURL,
    t.formatID,
    t.creationDate,
    t.updateDate,
    t.lateMinutes,
  t.thesisGradesID,
	s.*,
	u.*,
	sp.specializationID,
	sp.name AS specializationName,
  es.evaluationStatusID AS thesis_statusID,
  es.name AS thesis_status,
  es.description AS thesis_statusDescription,
  ROUND(tg.finalGrade, 2) AS finalGrade,
	ROUND(tg.grade1, 2) AS stage1_grade,
	ROUND(tg.grade2, 2) AS stage2_grade,
	ROUND(tg.grade3, 2) AS stage3_grade,
    ROUND(te1.grade1, 2) AS director_grade1,
    ROUND(te1.grade2, 2) AS director_grade2,
    ROUND(te2.grade1, 2) AS codirector_grade1,
    ROUND(te2.grade2, 2) AS codirector_grade2,
    ROUND(te3.grade1, 2) AS programDirector_grade1,
    ROUND(te3.grade2, 2) AS programDirector_grade2,
    ROUND(te4.grade1, 2) AS academicA_grade1,
    ROUND(te4.grade2, 2) AS academicA_grade2,
    ROUND(te5.grade1, 2) AS academicB_grade1,
    ROUND(te5.grade2, 2) AS academicB_grade2,
    r.rubricID AS rubric_rubricID,
    r.name AS rubric_name,
    r.description AS rubric_description,
    r.templateID AS rubric_templateID,
    te1.thesisEvaluatorID AS director_thesisEvaluatorID,
	e1.userID AS director_userID,
	e1.fullName AS director_fullName,
	e1.rut AS director_rut,
	e1.email AS director_email,
    te2.thesisEvaluatorID AS codirector_thesisEvaluatorID,
	e2.userID AS codirector_userID,
	e2.fullName AS codirector_fullName,
	e2.rut AS codirector_rut,
	e2.email AS codirector_email,
    te3.thesisEvaluatorID AS programDirector_thesisEvaluatorID,
	e3.userID AS programDirector_userID,
	e3.fullName AS programDirector_fullName,
	e3.rut AS programDirector_rut,
	e3.email AS programDirector_email,
    te4.thesisEvaluatorID AS academicA_thesisEvaluatorID,
	e4.userID AS academicA_userID,
	e4.fullName AS academicA_fullName,
	e4.rut AS academicA_rut,
	e4.email AS academicA_email,
    te5.thesisEvaluatorID AS academicB_thesisEvaluatorID,
	e5.userID AS academicB_userID,
	e5.fullName AS academicB_fullName,
	e5.rut AS academicB_rut,
	e5.email AS academicB_email
FROM
	evaluation t
    JOIN evaluationStatus es
    ON t.evaluationStatusID = es.evaluationStatusID
    JOIN thesisGrades tg
    on t.thesisGradesID = tg.thesisGradesID
    LEFT JOIN rubric r
    ON t.rubricID = r.rubricID
	JOIN studentHasSemester sse
	ON t.studentHasSemesterID = sse.studentHasSemesterID
	JOIN semester s 
	ON sse.semesterID = s.semesterID
	JOIN specialization sp 
	ON sse.specializationID = sp.specializationID
	JOIN user_short u
	ON sse.userID = u.userID
	LEFT JOIN thesisEvaluator te1
	ON t.evaluationID = te1.evaluationID AND te1.evaluatorCategoryID = 4
	LEFT JOIN user_short e1
	ON te1.userID = e1.userID
	LEFT JOIN thesisEvaluator te2
	ON t.evaluationID = te2.evaluationID AND te2.evaluatorCategoryID = 5
	LEFT JOIN user_short e2
	ON te2.userID = e2.userID
	LEFT JOIN thesisEvaluator te3
	ON t.evaluationID = te3.evaluationID AND te3.evaluatorCategoryID = 6
	LEFT JOIN user_short e3
	ON te3.userID = e3.userID
	LEFT JOIN thesisEvaluator te4
	ON t.evaluationID = te4.evaluationID AND te4.evaluatorCategoryID = 2
	LEFT JOIN user_short e4
	ON te4.userID = e4.userID
	LEFT JOIN thesisEvaluator te5
	ON t.evaluationID = te5.evaluationID AND te5.evaluatorCategoryID = 3
	LEFT JOIN user_short e5
	ON te5.userID = e5.userID
  WHERE p.thesisGradesID IS NOT NULL;

-- -----------------------------------------------------
-- View `posgrado_db`.`preprojectEvaluation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `posgrado_db`.`preprojectEvaluation`;
USE `posgrado_db`;
CREATE OR REPLACE VIEW preprojectEvaluation AS
SELECT
    p.evaluationID,
    p.studentHasSemesterID,
    p.projectURL,
    p.formatID,
    p.creationDate,
    p.updateDate,
    p.lateMinutes,
    es.evaluationStatusID AS preproject_statusID,
    es.name AS preproject_status,
    es.description AS preproject_statusDescription,
    pe1.evaluationStatusID AS academicA_statusID,
    pe1.comment1 AS academicA_comment1,
    pe1.comment2 AS academicA_comment2,
    pe1.comment3 AS academicA_comment3,
    pe1.comment4 AS academicA_comment4,
    pe1.comment5 AS academicA_comment5,
    pe1.comment6 AS academicA_comment6,
    pe1.comment7 AS academicA_comment7,
    pe2.evaluationStatusID AS academicB_statusID,
    pe2.comment1 AS academicB_comment1,
    pe2.comment2 AS academicB_comment2,
    pe2.comment3 AS academicB_comment3,
    pe2.comment4 AS academicB_comment4,
    pe2.comment5 AS academicB_comment5,
    pe2.comment6 AS academicB_comment6,
    pe2.comment7 AS academicB_comment7,
    r.rubricID AS rubric_rubricID,
    r.name AS rubric_name,
    r.description AS rubric_description,
    r.templateID AS rubric_templateID,
	s.*,
	u.*,
	sp.specializationID,
	sp.name AS specializationName,
    es1.name AS academicA_status,
    es1.description AS academicA_statusDescription,
    es2.name AS academicB_status,
    es2.description AS academicB_statusDescription,
    pe1.preprojectEvaluatorID AS academicA_preprojectEvaluatorID,
    e1.userID AS academicA_userID,
    e1.fullName AS academicA_fullName,
    e1.rut AS academicA_rut,
    e1.email AS academicA_email,
    pe2.preprojectEvaluatorID AS academicB_preprojectEvaluatorID,
    e2.userID AS academicB_userID,
    e2.fullName AS academicB_fullName,
    e2.rut AS academicB_rut,
    e2.email AS academicB_email,
    e3.userID AS guideAcademic_userID,
    e3.fullName AS guideAcademic_fullName,
    e3.rut AS guideAcademic_rut,
    e3.email AS guideAcademic_email
FROM
    evaluation p 
    JOIN evaluationStatus es 
    ON p.evaluationStatusID = es.evaluationStatusID
    LEFT JOIN rubric r
    ON p.rubricID = r.rubricID
    JOIN studentHasSemester sse
    ON p.studentHasSemesterID = sse.studentHasSemesterID 
    JOIN semester s 
    ON sse.semesterID = s.semesterID
    JOIN specialization sp 
    ON sse.specializationID = sp.specializationID
    JOIN user_short u
    ON sse.userID = u.userID
    LEFT JOIN preprojectEvaluator pe1
    ON p.evaluationID = pe1.evaluationID AND pe1.evaluatorCategoryID = 2
    LEFT JOIN evaluationStatus es1
    ON pe1.evaluationStatusID = es1.evaluationStatusID
    LEFT JOIN user_short e1
    ON pe1.userID = e1.userID
    LEFT JOIN preprojectEvaluator pe2
    ON p.evaluationID = pe2.evaluationID AND pe2.evaluatorCategoryID = 3
    LEFT JOIN evaluationStatus es2
    ON pe2.evaluationStatusID = es2.evaluationStatusID
    LEFT JOIN user_short e2
    ON pe2.userID = e2.userID
    LEFT JOIN preprojectEvaluator pe3
    ON p.evaluationID = pe3.evaluationID AND pe3.evaluatorCategoryID = 1
    LEFT JOIN user_short e3
    ON pe3.userID = e3.userID
    WHERE p.thesisGradesID IS NULL;

-- -----------------------------------------------------
-- View `posgrado_db`.`userHasRoles`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `posgrado_db`.`userHasRoles`;
USE `posgrado_db`;
CREATE OR REPLACE VIEW userHasRoles AS
SELECT
  u.*,
  roles_agg.rolesID,
  roles_agg.roles
FROM
    user u
    JOIN (
        SELECT
            ru.userID,
            GROUP_CONCAT(ru.roleID ORDER BY ru.roleID SEPARATOR ';') AS rolesID,
            GROUP_CONCAT(r.name ORDER BY ru.roleID SEPARATOR ';') AS roles
        FROM 
            userHasRole ru
            JOIN role r 
            ON r.roleID = ru.roleID
            GROUP BY ru.userID
    ) AS roles_agg 
    ON u.userID = roles_agg.userID;

-- -----------------------------------------------------
-- View `posgrado_db`.`titleHasUniversity`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `posgrado_db`.`titleHasUniversity`;
USE `posgrado_db`;
CREATE OR REPLACE VIEW titleHasUniversity AS
SELECT 
    t.*, 
    u.name AS universityName, 
    u.country, 
    u.city, 
    d.name AS degree, 
    d.type
FROM 
    title t 
    JOIN degree d 
    ON t.degreeID = d.degreeID
    JOIN university u 
    ON t.universityID = u.universityID;

-- -----------------------------------------------------
-- View `posgrado_db`.`usersWithRoles`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `posgrado_db`.`usersWithRoles`;
USE `posgrado_db`;
CREATE OR REPLACE VIEW usersWithRoles as
SELECT 
	uhr.userID,
    r.name as role,
    r.roleID
FROM
	userHasRole uhr
    JOIN role r
    on uhr.roleID = r.roleID;

-- -----------------------------------------------------
-- View `posgrado_db`.`user_short`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `posgrado_db`.`user_short`;
USE `posgrado_db`;
CREATE OR REPLACE VIEW user_short AS
SELECT
	u.userID,
	u.rut,
	CONCAT(
		u.firstName,
		' ',
		u.secondName,
		' ',
		u.surname1,
		' ',
		u.surname2
	) AS fullName,
	u.email
FROM
  user u;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

INSERT INTO `user` (`userID`,`rut`,`firstName`,`secondName`,`surname1`,`surname2`,`sex`,`civilStatus`,`birthday`,`address`,`email`,`phone`,`entry`,`workPlace`,`phoneWork`,`job`,`articulation`,`group`) VALUES 
(1,'20.123.233-1','Leonardo','Leonardo','Rodríguez','Fernandez','M','Soltero/a','2023-01-31','Psje. Paine 2827','Leonardo.Rodríguez@alumnos.uta.cl',121345567,'2023',NULL,NULL,NULL,0,1),
(2,'20.123.455-7','Sebastian','Sebastian','torres','Torres','M','Soltero/a','2023-08-01','Linderos 3731','Sebastian.Torres@alumnos.uta.cl',123456781,'2023',NULL,NULL,NULL,0,1),
(3,'20.123.233-3','Leonardo1','Leonardo1','Rodríguez1','Rodríguez1','M','Soltero/a','2023-01-01','Orozimbo Barbosa 3720','Leonardo.Rodríguez1@alumnos.uta.cl',912134556,'2023','Universidad de Tarapacá','964873634','Docente de Historia',1,1),
(4,'20.123.233-4','Leonardo2','Leonardo2','Rodríguez2','Rodríguez2','M','Soltero/a','2023-01-31','Orozimbo','Leonardo.Rodríguez2@alumnos.uta.cl',123456789,'2023',NULL,NULL,NULL,NULL,1),
(5,'20.547.055-7','Leonardo3','Leonardo3','Rodríguez3','Rodríguez3','M','Soltero/a','2000-09-12','s','Leonardo.Rodríguez3@alumnos.uta.cl',966234532,'2023',NULL,NULL,NULL,NULL,1);

INSERT INTO `role` (`roleID`,`name`) VALUES (1,'SuperAdmin'),(2,'Administrador'),(3,'Académico'),(4,'Estudiante');

INSERT INTO `userHasRole` (`userID`,`roleID`) VALUES (1,1),(1,2),(2,1),(2,2),(2,3),(2,4),(3,2),(3,4),(4,3),(4,2),(5,3),(5,4);

INSERT INTO `format` (`formatId`,`name`) VALUES (1,'pdf'),(2,'png'),(3,'jpg'),(4,'doc'),(5,'xlsx');

INSERT INTO `document` (`documentID`,`userID`,`category`,`archiveURL`,`formatId`) VALUES (1,1,'Certificado de Nacimiento','link1',1),(2,2,'Currículum','link2',2);

INSERT INTO `semester` (`semesterID`,`startDate`,`finishDate`,`semesterNumber`,`year`) VALUES 
(1,'2023-11-20','2023-12-28',1,2023),
(2,'2023-11-25','2023-11-23',2,2023),
(3,'2024-01-25','2023-11-23',1,2024),
(4,'2024-01-25','2023-11-23',2,2024),
(5,'2024-01-25','2023-11-23',1,2025),
(6,'2024-01-25','2023-11-23',2,2025);

INSERT INTO `specialization` (`specializationID`,`name`) VALUES (1,'Sin especialización'),(2,'Gestión e Innovación'),(3,'Didáctica y Evaluación'),(4,'Diversidad e Interculturalidad en Educación');

INSERT INTO `semesterStatus` (`semesterStatusID`,`name`,`description`) VALUES 
(1,'En proceso','Está en desarrollo.'),
(2,'Aprobado','El estudiante ha sido aprobado.'),
(3,'Rechazado','El estudiante ha sido rechazado.'),
(4,'Cancelado','El estudiante ha cancelado su matrícula.'),
(5,'En evaluación','El estudiante está realizando alguna de las evaluaciones o esperando su revisión.');

INSERT INTO `evaluationType` (`evaluationTypeID`,`name`) VALUES (1,'Anteproyecto'),(2,'Tesis');

INSERT INTO `studentHasSemester` (`studentHasSemesterID`,`userID`,`semesterID`,`specializationID`) VALUES (1,1,1,2),(2,2,2,3),(3,3,3,4);

INSERT INTO `studentHasSpecialization` (`studentHasSpecializationID`,`userID`,`specializationID`,`entrySemesterID`,`completionSemesterID`,`semesterStatusID`) VALUES 
(1,2,2,1,2,1),
(2,5,3,1,NULL,1),
(3,5,2,1,NULL,1);

INSERT INTO `evaluationStatus` (`evaluationStatusID`,`name`,`description`) VALUES 
(1,'Sin asignación','Proceso de revisión creado, pero sin académicos asignados.'),
(2,'Sin revisión','Los académicos asignados aún no terminan de evaluar.'),
(3,'Aprobado','Evaluación aprobada.'),
(4,'Rechazado','Evaluación rechazada.'),
(5,'Aprobado con observaciones','Se deben corregir las observaciones indicadas.'),
(6,'Rechazado en primer intento','Evaluación rechazada en el primer intento, tiene otra oportunidad para entregarlo.'),
(7,'Corregido','El anteproyecto fue corregido por el evaluador correspondiente');

INSERT INTO `evaluation` (`evaluationID`,`studentHasSemesterID`,`evaluationStatusID`,`projectURL`,`formatID`,`creationDate`,`updateDate`) VALUES 
(1,1,1,'',2,'2023-12-16 00:00:00',NULL),
(2,1,1,'',2,'2023-12-16 00:00:00',NULL),
(3,2,2,'',2,'2023-12-17 00:00:00',NULL),
(4,3,2,'',2,'2023-12-19 00:00:00',NULL);

INSERT INTO `question` (`questionID`,`userID`,`question`) VALUES 
(1,NULL,'Presenta un desarrollo sistemático, interesante y actual, relacionado con el ámbito educativo.'),
(2,NULL,'Presenta argumentos teóricos suficientes y relevantes en relación a la temática tratada.'),
(3,NULL,'Las ideas expuestas son claras y existe cohesión entre las partes del Anteproyecto (Título, Problema, Objetivo, Metodología, Marco teórico)'),
(4,NULL,'La redacción es adecuada y sustenta la idea central del Anteproyecto.'),
(5,NULL,'La propuesta metodológica es pertinente y conecta con el tipo y diseño de investigación.'),
(6,NULL,'Utiliza fuentes teóricas suficientes que soporten los argumentos del autor, autora o autores.'),
(7,NULL,'Interpreta las citaciones de sus fuentes teóricas y sustentan la idea central del artículo.'),
(8,NULL,'Todas las citas están en el listado de Referencias y todas las referencias son utilizadas en el artículo.');

INSERT INTO `section` (`sectionID`,`name`) VALUES (1,'Preguntas'),(2,'Pertenencia y relevancia teórica'),(3,'Coherencia argumentativa'),(4,'Referencia bibliográficas');

INSERT INTO `template` (`templateID`,`name`,`description`,`isActive`) VALUES (1,'Plantilla por defecto','Plantilla utilizada por defecto para las rúbricas de anteproyecto.',1);

INSERT INTO `templateHasSection` (`templateHasSectionID`,`templateID`,`sectionID`,`positionNumber`) VALUES (1,1,2,1),(2,1,3,2),(3,1,4,3);

INSERT INTO `templateHasQuestion` (`templateHasQuestionID`,`templateHasSectionID`,`questionID`,`positionNumber`) VALUES
(1,1,1,1),
(2,1,2,2),
(3,2,3,1),
(4,2,4,2),
(5,2,5,3),
(6,3,6,1),
(7,3,7,2),
(8,3,8,3);

INSERT INTO `evaluatorCategory` (`evaluatorCategoryID`,`name`) VALUES
(1,'Guía'),
(2,'A'),
(3,'B'),
(4,'Director'),
(5,'Codirector'),
(6,'Director del programa');

INSERT INTO `rubric` (`rubricID`,`name`,`description`,`templateID`) VALUES 
(1,'Rubrica 1','Esta es la descripción de la Rubrica 3',NULL),
(2,'Rubrica 2','Rubrica para el Anteproyecto',NULL),
(3,'Rubrica 3','Rubrica para la evaluación de la Tesis',NULL);

INSERT INTO `university` (`universityID`,`name`,`city`,`country`) VALUES (1,'Universidad de Tarapacá','Arica','Chile');

INSERT INTO `campus` (`campusID`,`universityID`,`name`,`ubication`) VALUES (1,1,'saucache','1010069 Arica, Arica y Parinacota');

INSERT INTO `building` (`buildingID`,`campusID`,`name`) VALUES (1,1,'Edificio de computación');

INSERT INTO `object` (`objectID`,`name`,`description`,`photoURL`,`formatID`) VALUES (1,'mesa',NULL,NULL,NULL),(2,'silla',NULL,NULL,NULL),(3,'computador',NULL,NULL,NULL);

INSERT INTO `degree` (`degreeID`,`name`,`type`) VALUES (1,'Magíster','Postgrado'),(2,'Licenciatura','Grado');

INSERT INTO `area` (`areaID`, `name`) VALUES 
(1, 'Salud'),
(2, 'Ingeniería'),
(3, 'Ciencias Sociales'),
(4, 'Ciencias Naturales'),
(5, 'Educación'),
(6, 'Comunicación y Medios'),
(7, 'Negocios y Economía');

INSERT INTO `title` (`titleID`,`universityID`,`degreeID`,`name`,`areaID`) VALUES 
(1,1,1,'Magíster en Historia',NULL),
(2,1,1,'Magíster en Ciencias con Mención en Matemática',NULL);

INSERT INTO `studentHasTitle` (`studentHasTitleID`,`userID`,`titleID`,`titleYear`,`archiveURL`,`formatID`) VALUES (1,1,1,2023,'',1);

INSERT INTO `permission` (`permissionID`,`name`) VALUES 
(1,'Permiso para Escoger Línea de Formación'),
(2,'Permiso para Escoger 1° Electivo'),
(3,'Permiso para Escoger 2° Electivo'),
(4,'Permiso para Subir Anteproyecto'),
(5,'Permiso para Subir Tesis');

INSERT INTO `elective` (`electiveID`,`specializationID`,`number`,`name`) VALUES 
(1,2,1,'Gestión e Innovación Educativa.'),
(2,2,1,'Evaluación de Sistemas e Instituciones Educativas.'),
(3,3,1,'Currículo.'),
(4,3,1,'Didáctica de los aprendizajes.'),
(5,4,1,'El enfoque Intercultural en Educación.'),
(6,4,1,'Ciudadanía Democrática y Educación.'),
(7,2,2,'Dirección de Organizaciones Educativas.'),
(8,2,2,'Gestión Financiera Educacional.'),
(9,3,2,'Gestión e Innovación Curricular.'),
(10,3,2,'Evaluación de los Aprendizajes.'),
(11,4,2,'Migración y Desigualdad en Educación.'),
(12,4,2,'Diversidad e Identidad Étnica.');

INSERT INTO `studentHasElective` (`studentHasElectiveID`,`userID`,`electiveID`,`semesterID`) VALUES 
(1,1,1,1),
(2,1,7,2),
(3,5,3,1),
(4,5,9,2),
(5,5,1,3),
(6,5,7,4);